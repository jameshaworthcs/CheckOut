<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AutoCheckin Log - CheckOut</title>
    <style>
      html {
        scrollbar-color: white #1a1a1a;
      }

      body {
        font-family: Arial, sans-serif;
        margin: 20px;
        padding: 0;
      }

      /* Light mode styles */
      @media (prefers-color-scheme: light) {
        body {
          background-color: #ffffff;
          color: #000000;
        }
        table {
          background-color: #f2f2f2;
        }
        th {
          background-color: #cccccc;
        }
        tr.fail {
          background-color: #ffcccc;
        }
        tr.checkin {
          font-weight: bold;
          background-color: #ccffcc;
        }
        tr:nth-child(even) {
          background-color: #e6e6e6;
        }
      }

      /* Dark mode styles */
      @media (prefers-color-scheme: dark) {
        body {
          background-color: #1a1a1a;
          color: #ffffff;
        }
        table {
          background-color: #333333;
        }
        th {
          background-color: #444444;
        }
        tr.fail {
          background-color: #550000 !important;
        }
        tr.checkin {
          font-weight: bold;
          background-color: #005500 !important;
        }
        tr:nth-child(even) {
          background-color: #444444;
        }
      }

      /* Header row styles */
      th {
        padding: 8px;
        text-align: left;
      }

      /* Table cell styles */
      td {
        padding: 8px;
        text-align: left;
      }

      td.editable {
        background-color: rgba(52, 152, 219, 0.1);
      }

      .action-buttons {
        white-space: nowrap;
      }

      .action-button {
        padding: 4px 8px;
        margin: 0 2px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9em;
      }

      .edit-button {
        background-color: #3498db;
        color: white;
      }

      .delete-button {
        background-color: #e74c3c;
        color: white;
      }

      .confirm-button {
        background-color: #2ecc71;
        color: white;
      }

      /* Message styles */
      #session-message {
        margin-bottom: 10px;
        font-weight: bold;
      }

      .green-text {
        color: green;
      }

      .red-text {
        color: red;
      }

      .hidden-message {
        text-align: center;
        font-style: italic;
        font-size: 0.9em;
      }

      .manage-link {
        text-decoration: none;
        color: #3498db;
      }

      #email-info {
        margin-bottom: 10px;
      }

      #overlay {
        display: none;
        position: absolute; /* Changed from fixed to absolute */
        top: 0;
        left: 0;
        right: 0; /* Ensure it spans the entire form area */
        bottom: 0;
        background: rgba(255, 255, 255, 0.7);
        z-index: 1000;
      }

      .loader {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 2s linear infinite;
        position: absolute;
        top: 50%;
        left: 50%;
        margin: -25px 0 0 -25px;
      }
      /* for loader */
      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      .error-box {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #ff0000;
        color: #ffffff;
        padding: 20px;
        border-radius: 5px;
        z-index: 1500;
      }
    </style>
  </head>
  <body>
    <div id="email-info"></div>
    <div id="session-message"></div>
    <!-- <h2>Log Data</h2> -->
    <!-- <label>
    <input type="checkbox" id="display-logs-checkbox"> Display operational logs
</label> -->
    <br />
    <table id="log-table">
      <thead>
        <tr>
          <th>State</th>
          <th>Message</th>
          <th>Timestamp</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="log-table-body"></tbody>
    </table>
    <div id="post-table"></div>
    <div id="overlay">
      <div class="loader"></div>
    </div>
    <div class="error-box" id="error-box"></div>
    <script>
      // Add global editing state
      let isEditing = false;
      let refreshInterval = null;

      function startRefreshInterval() {
        if (!refreshInterval) {
          refreshInterval = setInterval(window.fetchLogData, 10000);
        }
      }

      function stopRefreshInterval() {
        if (refreshInterval) {
          clearInterval(refreshInterval);
          refreshInterval = null;
        }
      }

      // Move functions to global scope
      function showError(message) {
        const errorBox = document.getElementById('error-box');
        errorBox.textContent = message;
        errorBox.style.display = 'block';
        setTimeout(() => {
          errorBox.style.display = 'none';
        }, 3000);
      }

      function showOverlay() {
        document.getElementById('overlay').style.display = 'block';
      }

      function hideOverlay() {
        document.getElementById('overlay').style.display = 'none';
      }

      async function deleteLogEntry(id) {
        if (!confirm('Are you sure you want to delete this log entry?')) {
          return;
        }

        showOverlay();
        try {
          const response = await fetch(`/manage/api/autocheckin/logs/${id}`, {
            method: 'DELETE',
          });

          if (!response.ok) {
            throw new Error('Failed to delete log entry');
          }

          window.fetchLogData(); // Use window to access the function
        } catch (error) {
          console.error('Error deleting log entry:', error);
          showError('Failed to delete log entry');
        } finally {
          hideOverlay();
        }
      }

      function startEditing(row) {
        const messageCell = row.querySelector('.message-cell');
        const timestampCell = row.querySelector('.timestamp-cell');
        const editButton = row.querySelector('.edit-button');

        messageCell.contentEditable = true;
        messageCell.classList.add('editable');
        timestampCell.contentEditable = true;
        timestampCell.classList.add('editable');

        editButton.textContent = 'Confirm';
        editButton.classList.remove('edit-button');
        editButton.classList.add('confirm-button');
        
        // Set editing states
        row.dataset.editing = 'true';
        isEditing = true;
        stopRefreshInterval();
      }

      async function confirmEdit(row, id) {
        const messageCell = row.querySelector('.message-cell');
        const timestampCell = row.querySelector('.timestamp-cell');
        const editButton = row.querySelector('.confirm-button');

        const message = messageCell.textContent;
        
        // Parse the displayed date format back to a timestamp
        const displayedDate = timestampCell.textContent; // e.g. "Mar 10, 2024, 3:33 PM"
        const timestamp = new Date(displayedDate).toISOString();

        if (isNaN(new Date(displayedDate).getTime())) {
          showError('Invalid date format. Please use format like "Mar 10, 2024, 3:33 PM"');
          return;
        }

        showOverlay();
        try {
          const response = await fetch(`/manage/api/autocheckin/logs/${id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message, timestamp }),
          });

          if (!response.ok) {
            throw new Error('Failed to update log entry');
          }

          messageCell.contentEditable = false;
          timestampCell.contentEditable = false;
          messageCell.classList.remove('editable');
          timestampCell.classList.remove('editable');

          editButton.textContent = 'Edit';
          editButton.classList.remove('confirm-button');
          editButton.classList.add('edit-button');
          
          // Reset editing states
          row.dataset.editing = 'false';
          isEditing = false;
          startRefreshInterval();

          window.fetchLogData(); // Use window to access the function
        } catch (error) {
          console.error('Error updating log entry:', error);
          showError('Failed to update log entry');
        } finally {
          hideOverlay();
        }
      }

      document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);
        const isFrame = urlParams.get('frame') === 'true';
        const logTableBody = document.getElementById('log-table-body');
        const postTable = document.getElementById('post-table');
        const sessionMessage = document.getElementById('session-message');
        const emailInfo = document.getElementById('email-info');
        let fullLogs = false;

        if (!isFrame) {
          emailInfo.innerHTML = `Viewing logs for <a class="manage-link" href="/auto">Manage</a>`;
        }

        // Make fetchLogData globally accessible
        window.fetchLogData = function() {
          // Don't fetch if currently editing
          if (isEditing) {
            return;
          }

          var email = urlParams.get('email');
          const logDataUrl = '/manage/api/autocheckin/logs?email=' + email;
          fetch(logDataUrl)
            .then((response) => response.json())
            .then((data) => {
              logTableBody.innerHTML = '';
              var email = data[0].email;
              emailInfo.innerHTML = `Viewing logs for ${email}`;

              var sessionState;
              if (data[0].state === 'Fail') {
                sessionState = 'in error state';
              } else if (data[0].state === 'Disabled') {
                sessionState = 'disabled';
              } else if (data[0].state === 'Enabled') {
                sessionState = 'enabled';
              } else {
                sessionState = 'active';
              }

              let duplicatesCount = 0;
              let currentMessage = null;
              let combinedRow = null;
              let lastCombinedRow = null;

              data.forEach((entry, index) => {
                if (entry.message === currentMessage) {
                  duplicatesCount++;
                } else {
                  if (combinedRow && duplicatesCount > 0) {
                    const hiddenRow = document.createElement('tr');
                    hiddenRow.innerHTML = `
                      <td colspan="4" class="hidden-message">${duplicatesCount} duplicate log entries like the one above were hidden</td>
                    `;
                    logTableBody.insertBefore(hiddenRow, lastCombinedRow.nextSibling);
                    duplicatesCount = 0;
                  }
                  currentMessage = entry.message;
                  const row = document.createElement('tr');
                  row.className = entry.state.toLowerCase();
                  row.dataset.editing = 'false';
                  const timestamp = new Date(entry.timestamp).toLocaleString('en-US', {
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true,
                    day: 'numeric',
                    month: 'short',
                    year: 'numeric',
                  });
                  row.innerHTML = `
                    <td>${entry.state}</td>
                    <td class="message-cell">${entry.message}</td>
                    <td class="timestamp-cell">${timestamp}</td>
                    <td class="action-buttons">
                      <button class="action-button edit-button" onclick="this.closest('tr').dataset.editing === 'true' ? confirmEdit(this.closest('tr'), '${entry.logID}') : startEditing(this.closest('tr'))">Edit</button>
                      <button class="action-button delete-button" onclick="deleteLogEntry('${entry.logID}')">Delete</button>
                    </td>
                  `;
                  logTableBody.appendChild(row);
                  combinedRow = row;
                }
                lastCombinedRow = combinedRow;
              });

              if (combinedRow && duplicatesCount > 0) {
                const hiddenRow = document.createElement('tr');
                hiddenRow.innerHTML = `
                  <td colspan="4" class="hidden-message">${duplicatesCount} duplicate log entries like the one above were hidden</td>
                `;
                logTableBody.insertBefore(hiddenRow, lastCombinedRow.nextSibling);
              }

              postTable.innerHTML = '<p>Data is refreshed every 10 seconds.</p>';
            })
            .catch((error) => {
              console.error('Error fetching log data:', error);
              logTableBody.innerHTML = `<tr><td colspan="4" class="error-message">Error loading log data: ${error.message}</td></tr>`;
            });
        };

        // Start the initial refresh interval
        startRefreshInterval();
        postTable.innerHTML = 'Loading...';
        window.fetchLogData();
      });
    </script>
  </body>
</html>
