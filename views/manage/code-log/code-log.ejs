<!-- table.html -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Code Log - CheckOut</title>
    <%- include('../../global/head'); %>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      body {
        margin: 0;
        padding: 0;
      }

      .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 0 10px;
        /* Adjust as needed */
        padding-top: 30px;
        margin-left: 2%;
      }

      .refresh-btn {
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 0 10px;
        /* Adjust as needed */
        padding-top: 30px;
        margin-right: 40%;
        margin-left: 40%;
      }

      table {
        width: 95%;
        margin-bottom: 20px;
      }

      button {
        padding: 8px;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        display: inline-block;
        vertical-align: middle;
        margin-left: 5px;
      }

      #last-refresh {
        font-size: 14px;
        text-align: center;
      }

      #refresh-container,
      #limit-container {
        margin-bottom: 20px;
      }

      #refresh-container,
      #limit-container label {
        margin-right: 10px;
        font-weight: bold;
      }

      #refresh-interval,
      #limit-selector {
        padding: 5px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 14px;
        width: fit-content;
      }

      #refresh-interval:focus,
      #limit-selector:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
      }

      /* CSS for Search Columns */
      #search-container {
        display: flex;
        align-items: flex-start;
        /* Align columns to the top */
        margin-bottom: 20px;
      }

      .search-column {
        display: flex;
        flex-direction: column;
        margin-right: 20px;
        /* Add space between columns */
      }

      .search-column input {
        margin-bottom: 10px;
        /* Add space between input boxes */
      }

      #filter-button {
        align-self: flex-end;
        /* Align button to the bottom right */
        background-color: #007bff96;
        color: white;
      }

      #button-container {
        display: flex;
      }

      #clear-filters-btn,
      #man-ref-btn {
        margin-right: 10px;
        /* Adjust as needed */
      }

      #clear-filters-btn {
        background-color: #583c3c;
        color: white;
      }

      #man-ref-btn {
        background-color: #3c5842;
        color: white;
      }

      #data-table tbody tr:nth-child(even) {
        background-color: rgba(242, 242, 242, 0.15);
        /* Light grey background color for even rows */
      }

      @media (max-width: 600px) {
        table {
          max-width: 100%;
        }
      }
    </style>
  </head>

  <body>
    <%- include('../../global/navbar'); %>
    <div class="container">
      <h2>Code Log</h2>
      <p>
        Welcome to the code log. <br /><br />To filter results, use the form below, and set the
        refresh to never for the best filtering experience. <br /><br />By default, the last 100
        entries are shown. This can be updated to your preference below.
      </p>
      <div id="refresh-container">
        <label for="refresh-interval">Refresh Interval:</label>
        <select id="refresh-interval">
          <option value="0.5">0.5s</option>
          <option value="1">1s</option>
          <option selected value="10">10s</option>
          <option value="30">30s</option>
          <option value="60">1min</option>
          <option value="600">10min</option>
          <option value="never">Never</option>
        </select>
      </div>
      <div id="limit-container">
        <label for="limit-selector">Results limit:</label>
        <select id="limit-selector">
          <option selected value="100">Last 100</option>
          <option value="200">Last 200</option>
          <option value="500">Last 500</option>
          <option value="all">All</option>
        </select>
      </div>
      <!-- HTML Search Bars and Filter Button -->
      <div id="search-container">
        <div class="search-column">
          <input type="text" id="checkin-code-search" placeholder="Checkin Code" />
          <input type="text" id="username-search" placeholder="Username" />
          <input type="text" id="code-day-search" placeholder="Code Day" />
          <input type="text" id="group-code-search" placeholder="Group Code" />
          <input type="text" id="ip-search" placeholder="IP Address" />
        </div>
        <div class="search-column">
          <input type="text" id="code-id-search" placeholder="Code ID" />
          <input type="text" id="md-search" placeholder="MD" />
          <input type="text" id="code-desc-search" placeholder="Code Desc" />
          <input type="text" id="code-state-search" placeholder="Code State" />
          <input type="text" id="tk-search" placeholder="TK" />
        </div>
        <button id="filter-button">Filter</button>
      </div>
      <div id="button-container">
        <button id="clear-filters-btn">Clear Filters</button>
        <button id="man-ref-btn">Manual Refresh</button>
      </div>
      <p id="last-refresh"></p>

      <!-- Create an empty table ready to show logs -->
      <div>
        <div id="column-selection">
          <!-- Checkboxes for column selection will be appended here -->
        </div>
        <hr />
        <table id="data-table">
          <thead id="table-headers">
            <!-- Table headers will be appended here -->
          </thead>
          <tbody id="table-body">
            <!-- Data will be appended here -->
          </tbody>
        </table>
      </div>

      <!-- Include jQuery -->
      <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

      <script>
        $(document).ready(function () {
          let limit;
          limit = 100;
          function showBanner(message, backgroundColor = 'lightgreen', duration = 2000) {
            var banner = $('<div class="result-banner"></div>');
            banner
              .css({
                'background-color': backgroundColor,
                color: 'black',
                position: 'fixed',
                top: '0',
                left: '0',
                width: '100%',
                padding: '10px',
                'text-align': 'center',
                'z-index': '9999',
                display: 'none',
              })
              .text(message);
            $('body').append(banner);
            banner.fadeIn();
            setTimeout(function () {
              banner.fadeOut(function () {
                banner.remove();
              });
            }, duration);
          }

          // Column names
          var columnNames = [
            'codeID',
            'inst',
            'crs',
            'yr',
            'md',
            'codeDay',
            'groupCode',
            'checkinCode',
            'timestamp',
            'ip',
            'useragent',
            'tk',
            'deviceID',
            'username',
            'codeState',
            'codeDesc',
            'codeReps',
            'visState',
            'source',
          ];

          // By default, selected columns
          var defaultColumns = [
            'codeID',
            'md',
            'codeDay',
            'groupCode',
            'checkinCode',
            'username',
            'codeDesc',
            'timestamp',
            'ip',
            'codeReps',
            'codeState',
            'visState',
            'source',
            'deviceID',
          ];

          // Get selected columns from local storage or use defaultColumns if not available
          var selectedColumns =
            JSON.parse(localStorage.getItem('selectedColumns2')) || defaultColumns;

          // Append checkboxes for each column
          columnNames.forEach(function (columnName) {
            var isChecked = selectedColumns.includes(columnName) ? 'checked' : '';
            $('#column-selection').append(
              '<input type="checkbox" name="column" value="' +
                columnName +
                '" ' +
                isChecked +
                '> ' +
                columnName +
                ' '
            );
          });

          // Function to handle filtering based on entered text
          function applyFilters() {
            var checkinCode = $('#checkin-code-search').val().trim().toLowerCase();
            var username = $('#username-search').val().trim().toLowerCase();
            var codeDay = $('#code-day-search').val().trim().toLowerCase();
            var groupCode = $('#group-code-search').val().trim().toLowerCase();
            var ip = $('#ip-search').val().trim().toLowerCase();
            var codeID = $('#code-id-search').val().trim().toLowerCase();
            var md = $('#md-search').val().trim().toLowerCase();
            var codeDesc = $('#code-desc-search').val().trim().toLowerCase();
            var codeState = $('#code-state-search').val().trim().toLowerCase();
            var tk = $('#tk-search').val().trim().toLowerCase();

            // Filter rows based on entered text
            $('#table-body tr').each(function () {
              var row = $(this);
              var checkinCodeText = row.find('[data-column="checkinCode"]').text().toLowerCase();
              var usernameText = row.find('[data-column="username"]').text().toLowerCase();
              var codeDayText = row.find('[data-column="codeDay"]').text().toLowerCase();
              var groupCodeText = row.find('[data-column="groupCode"]').text().toLowerCase();
              var ipText = row.find('[data-column="ip"]').text().toLowerCase();
              var codeIDText = row.find('[data-column="codeID"]').text().toLowerCase();
              var mdText = row.find('[data-column="md"]').text().toLowerCase();
              var codeDescText = row.find('[data-column="codeDesc"]').text().toLowerCase();
              var codeStateText = row.find('[data-column="codeState"]').text().toLowerCase();
              var tkText = row.find('[data-column="tk"]').text().toLowerCase();

              var isVisible = true;
              if (checkinCode && checkinCodeText.indexOf(checkinCode) === -1) isVisible = false;
              if (username && usernameText.indexOf(username) === -1) isVisible = false;
              if (codeDay && codeDayText.indexOf(codeDay) === -1) isVisible = false;
              if (groupCode && groupCodeText.indexOf(groupCode) === -1) isVisible = false;
              if (ip && ipText.indexOf(ip) === -1) isVisible = false;
              if (codeID && codeIDText.indexOf(codeID) === -1) isVisible = false;
              if (md && mdText.indexOf(md) === -1) isVisible = false;
              if (codeDesc && codeDescText.indexOf(codeDesc) === -1) isVisible = false;
              if (codeState && codeStateText.indexOf(codeState) === -1) isVisible = false;
              if (tk && tkText.indexOf(tk) === -1) isVisible = false;

              // Show/hide row based on visibility
              if (isVisible) {
                row.show();
              } else {
                row.hide();
              }
            });
          }

          // Bind event to filter button click
          $('#filter-button').on('click', function () {
            applyFilters();
          });

          $('#clear-filters-btn').on('click', function () {
            // Clear the input values of all search boxes
            $('#checkin-code-search').val('');
            $('#username-search').val('');
            $('#code-day-search').val('');
            $('#group-code-search').val('');
            $('#ip-search').val('');
            $('#code-id-search').val('');
            $('#md-search').val('');
            $('#code-desc-search').val('');
            $('#code-state-search').val('');
            $('#tk-search').val('');

            // Refresh the table to show all rows
            refreshTable();
          });

          $('#man-ref-btn').on('click', function () {
            refreshTable();
          });

          // Function to toggle column visibility based on checkbox selection
          function toggleColumnVisibility(columnName, isChecked) {
            var columnIndex = columnNames.indexOf(columnName);
            $('td:nth-child(' + (columnIndex + 1) + ')').toggle(isChecked);
            $('th:nth-child(' + (columnIndex + 1) + ')').toggle(isChecked);
          }

          // Bind change event to checkboxes
          $(document).on('change', 'input[type="checkbox"][name="column"]', function () {
            var columnName = $(this).val();
            var isChecked = $(this).is(':checked');
            if (isChecked && !selectedColumns.includes(columnName)) {
              selectedColumns.push(columnName);
            } else if (!isChecked && selectedColumns.includes(columnName)) {
              selectedColumns.splice(selectedColumns.indexOf(columnName), 1);
            }
            toggleColumnVisibility(columnName, isChecked);
            // Save selected columns to local storage
            localStorage.setItem('selectedColumns2', JSON.stringify(selectedColumns));
          });

          function refreshTable() {
            // Fetch data from the log
            // const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            // let sc = '';

            // for (let i = 0; i < 18; i++) {
            //   const randomIndex = Math.floor(Math.random() * characters.length);
            //   sc += characters.charAt(randomIndex);
            // }
            var url = '/manage/api/code-log/data?limit=' + limit;
            $.get(url, function (data) {
              // Get the table body element
              var tableBody = $('#table-body');
              // Get the table headers element
              var tableHeaders = $('#table-headers');
              // Clear the existing content
              tableBody.empty();
              tableHeaders.empty();

              // Dynamically generate table headers from the JSON response
              var headers = selectedColumns;
              var headerRow = $('<tr></tr>');
              headers.forEach(function (header) {
                var columnIndex = columnNames.indexOf(header);
                headerRow.append($('<th data-column="' + header + '"></th>').text(header));
                // Hide non-selected columns
                if (!selectedColumns.includes(header)) {
                  $('td:nth-child(' + (columnIndex + 1) + ')').hide();
                  $('th:nth-child(' + (columnIndex + 1) + ')').hide();
                }
              });
              // Add header for Remove button column
              headerRow.append($('<th></th>').text('Mod'));
              tableHeaders.append(headerRow);
              headerRow.append($('<th></th>').text('Remove'));
              tableHeaders.append(headerRow);

              // Function to calculate alternating background color
              function getRowBackgroundColor(index) {
                return index % 2 === 0 ? '' : 'rgba(242, 242, 242, 0.15)'; // Alternating lighter and darker shades
              }

              // Loop through the data array
              data.forEach(function (row, index) {
                // Create a new table row element
                var tr = $('<tr></tr>');
                tr.css('background-color', getRowBackgroundColor(index));
                // Append table cells with log rows
                headers.forEach(function (header) {
                  var td = $('<td data-column="' + header + '"></td>').text(row[header]);
                  // Check the value of codeState for each row
                  if (header === 'codeState') {
                    // Set background color based on codeState value
                    if (row[header] === '0') {
                      td.css('background-color', '#C83F49'); // Set red background for codeState "0"
                    } else if (row[header] === '1') {
                      td.css('background-color', '#2E8B5730'); // Set green background for codeState "1"
                    }
                  }
                  // Cell background colours
                  if (row['codeState'] === '1') {
                    td.css('background-color', '#2E8B5730'); // Set green background for codeState "1"
                  }
                  if (row['visState'] === '0') {
                    td.css('background-color', '#C0C83F74'); // Set yellow background for visState '0'
                  }
                  if (row['codeState'] === '0') {
                    td.css('background-color', '#C83F49'); // Set red background for codeState "0"
                  }
                  if (header === 'username') {
                    // Set background color based on codeState value
                    if (
                      row[header] != 'anon@checkout.ac.uk' &&
                      row[header] != 'guest@checkout.ac.uk'
                    ) {
                      td.css('text-decoration', 'underline'); // Set red background for codeState "0"
                    }
                    if (row[header] === 'shrine@checkout.ac.uk') {
                      td.css('font-weight', 'bold'); // Set green background for codeState "1"
                    }
                  }
                  // Append table cell to the table row
                  tr.append(td);
                  // Check if header is 'ip' and add copy button
                  if (header === 'ip') {
                    var copyButton = $('<button class="copy-button">Copy</button>');
                    copyButton.on('click', function () {
                      // Copy IP address to clipboard
                      var ipAddress = row['ip'];
                      navigator.clipboard
                        .writeText(ipAddress)
                        .then(function () {
                          // Display green banner saying "Copied" for 2 seconds
                          displayNotice('Copied!', 'success');
                        })
                        .catch(function (error) {
                          console.error('Unable to copy IP address: ', error);
                        });
                    });
                    // Append the copy button next to the IP address
                    td.append(copyButton);
                    // Create the "Lookup" button
                    var lookupButton = $('<button class="lookup-button">🔎</button>');
                    lookupButton.on('click', function () {
                      // Open a new tab with the IP lookup URL
                      var ipAddress = row['ip'];
                      window.open('https://ip.me/ip/' + ipAddress, '_blank');
                    });
                    // Append the "Lookup" button next to the IP address
                    td.append(lookupButton);
                    // Style the "Lookup" button
                    lookupButton.css({
                      display: 'inline-block',
                      'vertical-align': 'middle',
                    });
                  }
                });

                // Create the "Remove" button and attach a click event handler
                var removeButton = $('<button class="remove-button">Remove</button>');
                removeButton.on('click', function () {
                  // Construct the URL with source_table and tk values
                  $.ajax({
                    url: '/manage/api/code-log/remove',
                    type: 'POST',
                    data: { codeID: row.codeID, tk: row.tk },
                    dataType: 'json',
                    success: function (data) {
                      var resultText = '';
                      for (var key in data) {
                        resultText += key + ': ' + data[key] + '<br>';
                      }
                      displayNotice(resultText, 'success');
                      refreshTable();
                    },
                    error: function (xhr, status, error) {
                      console.error(error);
                    },
                  });

                  // Optionally, you can remove the row from the table
                  tr.remove();
                });
                if (row.codeState === '0') {
                  var buttonText = 'Show';
                } else {
                  var buttonText = 'Hide';
                }
                var hideButton = $('<button class="remove-button">' + buttonText + '</button>');
                hideButton.on('click', function () {
                  var endpoint =
                    buttonText === 'Show'
                      ? '/manage/api/code-log/sysShow'
                      : '/manage/api/code-log/sysHide';
                  $.ajax({
                    url: endpoint,
                    type: 'POST',
                    data: { codeID: row.codeID, tk: row.tk },
                    dataType: 'json',
                    success: function (data) {
                      var resultText = '';
                      for (var key in data) {
                        resultText += key + ': ' + data[key] + '<br>';
                      }
                      displayNotice(resultText, 'success');
                      refreshTable();
                    },
                    error: function (xhr, status, error) {
                      console.error(error);
                    },
                  });
                });

                // Append the "Remove" button to the last column
                tr.append($('<td></td>').append(hideButton));

                // Append the "Hide" button to the last column
                tr.append($('<td></td>').append(removeButton));

                // Append the table row to the table body
                tableBody.append(tr);
              });

              // Update the last refresh timestamp
              var now = new Date();
              var timestamp = now.toLocaleString('en-US', {
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                fractionalSecondDigits: 0 | 1 | 2 | 3,
                hour12: true,
              });
              $('#last-refresh').html('Last Refresh: ' + timestamp + '<br>');
              applyFilters();
            });
          }

          // Function to refresh the table based on the selected refresh interval
          function refreshTableWithInterval(interval) {
            if (interval === 'never') {
              clearInterval(refreshInterval);
            } else {
              refreshTable(); // Refresh immediately before setting interval
              clearInterval(refreshInterval); // Clear previous interval
              if (interval !== 0) {
                refreshInterval = setInterval(refreshTable, interval * 1000); // Convert to milliseconds
              }
            }
          }

          // // Update the last refresh timestamp
          // function updateLastRefresh() {
          //     var now = new Date();
          //     var timestamp = now.toLocaleString('en-US', {
          //         weekday: 'long',
          //         month: 'long',
          //         day: 'numeric',
          //         hour: 'numeric',
          //         minute: 'numeric',
          //         second: 'numeric',
          //         fractionalSecondDigits: 0 | 1 | 2 | 3,
          //         hour12: true
          //     });
          //     $('#last-refresh').html('Last Refresh: ' + timestamp + '<br>Auto refresh set to every ' + ($('#refresh-interval').val() === 'never' ? 'Never' : $('#refresh-interval').val() + 's'));
          // }

          // Function to handle refresh interval change
          $('#refresh-interval').on('change', function () {
            var interval = $(this).val();
            var intervalText = 'Table will refresh every ' + $(this).val();
            displayNotice(intervalText, 'success');
            refreshTableWithInterval(interval);
            //updateLastRefresh();
          });

          $('#limit-selector').on('change', function () {
            if ($(this).val() == 'all') {
              limit = 999999999;
              var limitText = 'Showing all results.';
            } else {
              limit = $(this).val();
              var limitText = 'Showing last ' + $(this).val() + ' results.';
            }
            displayNotice(limitText, 'success');
            refreshTable();
            //updateLastRefresh();
          });

          // Initial table load
          refreshTable();

          // Set initial refresh interval
          var refreshInterval = setInterval(refreshTable, 10000);
        });
      </script>
    </div>
  </body>
</html>
